{"version":3,"sources":["App.module.css","Actions/index.js","Actions/types.js","components/PharmacyList.js","components/CountryPicker.js","App.js","serviceWorker.js","Reducers/index.js","Reducers/dataReducers.js","index.js"],"names":["module","exports","container","url","fetchData","country","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","changeableUrl","res","wrap","_context","prev","next","concat","axios","get","sent","type","payload","data","t0","console","log","stop","_x","apply","this","arguments","fetchCountries","_ref2","_callee2","_ref3","_context2","abrupt","PharmacyList","handleValue","e","_this","setState","search","target","value","state","props","prevProps","dataItems","filteredData","filter","item","eczane_ilce","toLowerCase","includes","length","map","react_default","createElement","key","id","className","eczane_adi","eczane_adres","eczane_telefon","placeholder","onChange","Component","connect","CountryPicker","handleCountryChange","_useState","useState","_useState2","slicedToArray","fetchedCountries","setFetchedCountries","useEffect","t1","fetchAPI","FormControl","NativeSelect","i","default","plaka","name","App","fetchedData","react_router_dom","styles","react_router","path","to","src_components_CountryPicker","src_components_PharmacyList","React","Boolean","window","location","hostname","match","combineReducers","undefined","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e79cdfff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1S629\"};","import axios from 'axios';\r\nimport { FETCH_DATA } from './types';\r\n\r\nconst url = 'http://api.kodlama.net/eczane';\r\nconst urll = 'http://localhost:3001';\r\n\r\n\r\nexport const fetchData =  (country) => async dispatch => {\r\n  let changeableUrl = url ;\r\n  \r\n  if(country) {\r\n    changeableUrl = `${url}/il/${country}`\r\n  }\r\n  else{\r\n    changeableUrl = `${url}/all`\r\n  }\r\n\r\n  try{\r\n    const res = await axios.get(changeableUrl);\r\n  \r\n    dispatch({ type: FETCH_DATA, payload: res.data.data });\r\n  }\r\n  catch (error){\r\n    console.log(error);\r\n  }\r\n  \r\n  \r\n}\r\n\r\n   \r\n  export const fetchCountries = async () => {\r\n    try {\r\n      const { data } = await axios.get(`${urll}/countries`);\r\n  \r\n      return data;\r\n  \r\n    }\r\n    catch(error) {\r\n      console.log(error)\r\n    }\r\n  }","export const FETCH_DATA = 'fetch_data';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchData } from '../Actions/index';\r\nimport './PharmacyList.css';\r\n\r\n\r\n\r\nclass PharmacyList extends Component {\r\n\r\n  handleValue = (e) => this.setState({ search: e.target.value })\r\n\r\n  componentDidMount() {\r\n    const country = this.props.country;\r\n    this.props.fetchData(country);\r\n  } \r\n  componentDidUpdate(prevProps){\r\n      if(this.props.country !== prevProps.country) {\r\n        this.props.fetchData(this.props.country)\r\n      }\r\n  }\r\n  state = {\r\n    search: '',\r\n  }\r\n \r\n    render(){\r\n      \r\n      const { search } = this.state;\r\n      console.log(search);\r\n\r\n      const filteredData = this.props.data.filter( item => {\r\n       return item.eczane_ilce.toLowerCase().includes( search.toLowerCase() )\r\n      } )\r\n      \r\n      let dataItems;\r\n\r\n      if(this.props.data.length > 0) {\r\n        dataItems = filteredData.map(item => (\r\n          \r\n          <div key={item.id} className=\"product\" >\r\n            <div className=\"product_info\"><h3>{item.eczane_adi}</h3></div>\r\n            <hr />\r\n            <div className=\"product_info\"><p><b>{item.eczane_ilce} İlçesi</b></p></div>\r\n            <div className=\"product_info\"><p>Adres: {item.eczane_adres}</p></div>\r\n            <div className=\"product_info\"><p>No :{item.eczane_telefon}</p></div>\r\n            \r\n          </div>\r\n        ));\r\n      }else{\r\n        dataItems = <h4>Empty</h4>\r\n      }\r\n \r\n      return(\r\n        <div>\r\n          <div className=\"header_container\">\r\n          <div className=\"header_search\">\r\n          <h4>İLÇE </h4>\r\n          <input className=\"header_searchInput\" type=\"text\" placeholder=\"Search\" onChange={this.handleValue} />\r\n          </div>\r\n          </div>\r\n          \r\n          <div className=\"container\">\r\n          {dataItems}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return { data : state.data };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchData })(PharmacyList);","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport { fetchCountries } from '../Actions/index';\r\nimport './CountryPicker.css';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n       \r\n    },[setFetchedCountries]);\r\n\r\n    return (\r\n        <div className=\"header_select\">\r\n            <h4>İL </h4>\r\n            <FormControl>\r\n                <NativeSelect className=\"header_selectbox\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                {fetchedCountries.map((country, i) => (<option key={i} default=\"\"  value={country.plaka}>{country.name}</option>))}\r\n                </NativeSelect>\r\n             </FormControl>\r\n        </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\nimport styles from './App.module.css';\nimport  {fetchData} from './Actions';\nimport PharmacyList from './components/PharmacyList';\nimport  CountryPicker  from './components/CountryPicker'\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\n\nclass App extends React.Component {\n  \n    state = {\n      data:{},\n      country:'',\n    }\n    async componentDidMount(){\n     \n      const data = await fetchData();\n      \n      this.setState({ data: data});\n    \n    }\n\n  handleCountryChange =  async (country) => {\n    const fetchedData = await fetchData(country); \n    // fetch the data\n    this.setState({ data: fetchedData, country: country });\n    // set the state\n    \n  }\n\n  \n  \n\n  render() {\n    \n    const { country } = this.state;\n    return (\n      <Router>\n        <div className={styles.container}> \n        <Switch>\n          <Route path='/' >\n          <h1>Türkiyedeki Tüm İllerin Nöbetçi Eczaneleri</h1>\n          <Link to={`/pharmacy/${country}`}>\n          <CountryPicker handleCountryChange={this.handleCountryChange} />\n          </Link>\n          <PharmacyList country={this.state.country} />\n          </Route>\n\n          <Route path='/pharmacy/:id'> \n          <h1>Türkiyedeki Tüm İllerin Nöbetçi Eczaneleri</h1>\n          <Link to={`/pharmacy/${country}`}>\n          <CountryPicker handleCountryChange={this.handleCountryChange} />\n          </Link>\n          <PharmacyList country={this.state.country} />\n          </Route>\n        </Switch>\n       </div>\n      </Router>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport dataReducer from './dataReducers';\r\n\r\nexport default combineReducers({\r\n    data: dataReducer\r\n});","import { FETCH_DATA } from '../Actions/types';\r\n\r\nexport default function(state = [], action) {\r\n    switch (action.type) {\r\n        case FETCH_DATA:\r\n            return action.payload;\r\n            default:\r\n                return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducers from './Reducers';\nimport reduxThunk from 'redux-thunk';\n\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n     <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}